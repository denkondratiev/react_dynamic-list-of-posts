{"version":3,"sources":["api.ts","components/Search/Search.tsx","components/PostItem/PostItem.tsx","components/Posts/Posts.tsx","App.tsx","index.tsx"],"names":["fetchData","url","a","fetch","then","response","json","data","getData","posts","users","comments","map","post","user","find","id","userId","filter","comment","postId","Search","props","handlerGetData","onChangeHandler","isLoaded","disabled","listLoaded","inputValue","className","type","placeholder","value","onChange","event","onClick","PostItem","title","body","name","email","phone","key","Posts","App","useState","setPosts","setIsLoaded","setDisabled","setListLoaded","setInputValue","filteredPosts","setFilteredPosts","currentTarget","newPosts","includes","ReactDOM","render","document","getElementById"],"mappings":"2RAQMA,EAAS,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACGC,MAAMF,GAAKG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UADxC,cACVC,EADU,yBAGTA,GAHS,2CAAH,sDAMFC,EAAO,uCAAG,gCAAAN,EAAA,sEACOF,EAXZ,6EAUK,cACfS,EADe,gBAEOT,EAXZ,6EASK,cAEfU,EAFe,gBAGaV,EAXf,gFAQE,cAGfW,EAHe,yBAKdF,EAAMG,KAAI,SAAAC,GAAI,kCAChBA,GADgB,IAEnBC,KAAMJ,EAAMK,MAAK,SAAAD,GAAI,OAAIA,EAAKE,KAAOH,EAAKI,UAC1CN,SAAUA,EAASO,QAAO,SAAAC,GAAO,OAAIA,EAAQC,SAAWP,EAAKG,YAR1C,4CAAH,qDCFPK,G,MAA0B,SAACC,GAAW,IAE/CC,EAMED,EANFC,eACAC,EAKEF,EALFE,gBACAC,EAIEH,EAJFG,SACAC,EAGEJ,EAHFI,SACAC,EAEEL,EAFFK,WACAC,EACEN,EADFM,WAGF,OACE,yBAAKC,UAAU,iBAEXF,EAEI,oCACE,2BACEG,KAAK,OACLC,YAAY,gBACZC,MAAOJ,EACPK,SAAU,SAACC,GAAD,OAAWV,EAAgBU,OAKzC,4BACEJ,KAAK,SACLD,UAAU,eACVM,QAAS,kBAAMZ,KACfG,SAAUA,GAETD,EAAW,aAAe,WCpC5BW,EAA4B,SAACd,GAAW,IAC3CT,EAASS,EAATT,KAER,OACE,oCACE,wBAAIgB,UAAU,aAAahB,EAAKwB,OAChC,uBAAGR,UAAU,QAAQhB,EAAKyB,MAC1B,0BAAMT,UAAU,QAAQhB,EAAKC,KAAKyB,MACjC,MACD,0BAAMV,UAAU,QAAQhB,EAAKC,KAAK0B,OACjC,MACD,0BAAMX,UAAU,QAAQhB,EAAKC,KAAK2B,OAClC,wBAAIZ,UAAU,SACbhB,EAAKF,SAASC,KAAI,SAAAO,GAAO,OACxB,wBAAIuB,IAAKvB,EAAQH,IACf,4BACE,4BAAKG,EAAQoB,MACb,2BAAIpB,EAAQmB,MACZ,2BAAInB,EAAQqB,cCjBXG,EAAyB,SAACrB,GAAW,IACxCb,EAAUa,EAAVb,MAER,OACE,oCACGA,EAAMG,KAAI,SAAAC,GAAI,OACb,yBAAKgB,UAAU,YAAYa,IAAK7B,EAAKG,IACnC,kBAAC,EAAD,CAAUH,KAAMA,UCoCX+B,EA5CH,WAAO,IAAD,EACUC,mBAAyB,IADnC,mBACTpC,EADS,KACFqC,EADE,OAEgBD,oBAAS,GAFzB,mBAETpB,EAFS,KAECsB,EAFD,OAGgBF,oBAAS,GAHzB,mBAGTnB,EAHS,KAGCsB,EAHD,OAIoBH,oBAAS,GAJ7B,mBAITlB,EAJS,KAIGsB,EAJH,OAKoBJ,mBAAS,IAL7B,mBAKTjB,EALS,KAKGsB,EALH,OAM0BL,mBAAyB,IANnD,mBAMTM,EANS,KAMMC,EANN,KAQV7B,EAAc,uCAAG,sBAAArB,EAAA,6DACrB6C,GAAY,GACZC,GAAY,GAFS,SAIfxC,IAAUJ,MAAK,SAAAG,GAAI,OAAIuC,EAASvC,MAJjB,uBAKfC,IAAUJ,MAAK,SAAAG,GAAI,OAAI6C,EAAiB7C,MALzB,OAOrB0C,GAAc,GAPO,2CAAH,qDAqBpB,OACE,yBAAKpB,UAAU,QACb,kBAAC,EAAD,CACEN,eAAgBA,EAChBC,gBAfkB,SAACU,GAA8C,IAC7DF,EAAUE,EAAMmB,cAAhBrB,MAERkB,EAAclB,GAEd,IAAMsB,EAAW7C,EAAMS,QAAO,SAAAL,GAAI,OAAIA,EAAKwB,MAAMkB,SAASvB,IACvDnB,EAAKyB,KAAKiB,SAASvB,MAEtBoB,EAAiBE,IAQb1B,WAAYA,EACZD,WAAYA,EACZF,SAAUA,EACVC,SAAUA,IAEZ,kBAAC,EAAD,CAAOjB,MAAO0C,MCxCpBK,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.ceb22277.chunk.js","sourcesContent":["import {\n  CompletePost, Post, User, Comment,\n} from './interfaces';\n\nconst API_POSTS = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/posts.json';\nconst API_USERS = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/users.json';\nconst API_COMMENTS = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/comments.json';\n\nconst fetchData = async (url: string) => {\n  const data = await fetch(url).then(response => response.json());\n\n  return data;\n};\n\nexport const getData = async (): Promise<CompletePost[]> => {\n  const posts: Post[] = await fetchData(API_POSTS);\n  const users: User[] = await fetchData(API_USERS);\n  const comments: Comment[] = await fetchData(API_COMMENTS);\n\n  return posts.map(post => ({\n    ...post,\n    user: users.find(user => user.id === post.userId) as User,\n    comments: comments.filter(comment => comment.postId === post.id),\n  }));\n};\n","import React from 'react';\nimport './Search.css';\n\ninterface Props {\n  handlerGetData: () => void;\n  onChangeHandler: (event: React.FormEvent<HTMLInputElement>) => void;\n  isLoaded: boolean;\n  disabled: boolean;\n  listLoaded: boolean;\n  inputValue: string;\n}\n\nexport const Search: React.FC<Props> = (props) => {\n  const {\n    handlerGetData,\n    onChangeHandler,\n    isLoaded,\n    disabled,\n    listLoaded,\n    inputValue,\n  } = props;\n\n  return (\n    <div className=\"buttons-block\">\n      {\n        listLoaded\n          ? (\n            <>\n              <input\n                type=\"text\"\n                placeholder=\"filter by....\"\n                value={inputValue}\n                onChange={(event) => onChangeHandler(event)}\n              />\n            </>\n          )\n          : (\n            <button\n              type=\"button\"\n              className=\"btn btn-dark\"\n              onClick={() => handlerGetData()}\n              disabled={disabled}\n            >\n              {isLoaded ? 'Loading...' : 'Load'}\n            </button>\n          )\n      }\n    </div>\n  );\n};\n","import React from 'react';\nimport { CompletePost } from '../../interfaces';\n\ninterface Props {\n  post: CompletePost;\n}\n\nexport const PostItem: React.FC<Props> = (props) => {\n  const { post } = props;\n\n  return (\n    <>\n      <h1 className=\"display-4\">{post.title}</h1>\n      <p className=\"lead\">{post.body}</p>\n      <span className=\"lead\">{post.user.name}</span>\n      {' / '}\n      <span className=\"lead\">{post.user.email}</span>\n      {' / '}\n      <span className=\"lead\">{post.user.phone}</span>\n      <hr className=\"my-4\" />\n      {post.comments.map(comment => (\n        <ul key={comment.id}>\n          <li>\n            <h3>{comment.name}</h3>\n            <p>{comment.body}</p>\n            <p>{comment.email}</p>\n          </li>\n        </ul>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\nimport { PostItem } from '../PostItem/PostItem';\nimport { CompletePost } from '../../interfaces';\n\ninterface Props {\n  posts: CompletePost[];\n}\n\nexport const Posts: React.FC<Props> = (props) => {\n  const { posts } = props;\n\n  return (\n    <>\n      {posts.map(post => (\n        <div className=\"jumbotron\" key={post.id}>\n          <PostItem post={post} />\n        </div>\n      ))}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getData } from './api';\nimport { Search } from './components/Search/Search';\nimport { Posts } from './components/Posts/Posts';\nimport { CompletePost } from './interfaces';\n\nconst App = () => {\n  const [posts, setPosts] = useState<CompletePost[]>([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [disabled, setDisabled] = useState(false);\n  const [listLoaded, setListLoaded] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [filteredPosts, setFilteredPosts] = useState<CompletePost[]>([]);\n\n  const handlerGetData = async () => {\n    setIsLoaded(true);\n    setDisabled(true);\n\n    await getData().then(data => setPosts(data));\n    await getData().then(data => setFilteredPosts(data));\n\n    setListLoaded(true);\n  };\n\n  const onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    const { value } = event.currentTarget;\n\n    setInputValue(value);\n\n    const newPosts = posts.filter(post => post.title.includes(value)\n    || post.body.includes(value));\n\n    setFilteredPosts(newPosts);\n  };\n\n  return (\n    <div className=\"main\">\n      <Search\n        handlerGetData={handlerGetData}\n        onChangeHandler={onChangeHandler}\n        inputValue={inputValue}\n        listLoaded={listLoaded}\n        isLoaded={isLoaded}\n        disabled={disabled}\n      />\n      <Posts posts={filteredPosts} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}